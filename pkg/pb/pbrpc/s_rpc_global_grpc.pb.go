// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto_rpc/s_rpc_global.proto

package pbrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalDataClient is the client API for GlobalData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalDataClient interface {
	EchoTest(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRep, error)
	GenUid(ctx context.Context, in *GenUIDReq, opts ...grpc.CallOption) (*GenUIDRep, error)
}

type globalDataClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalDataClient(cc grpc.ClientConnInterface) GlobalDataClient {
	return &globalDataClient{cc}
}

func (c *globalDataClient) EchoTest(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRep, error) {
	out := new(EchoRep)
	err := c.cc.Invoke(ctx, "/pbrpc.GlobalData/EchoTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDataClient) GenUid(ctx context.Context, in *GenUIDReq, opts ...grpc.CallOption) (*GenUIDRep, error) {
	out := new(GenUIDRep)
	err := c.cc.Invoke(ctx, "/pbrpc.GlobalData/GenUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalDataServer is the server API for GlobalData service.
// All implementations must embed UnimplementedGlobalDataServer
// for forward compatibility
type GlobalDataServer interface {
	EchoTest(context.Context, *EchoReq) (*EchoRep, error)
	GenUid(context.Context, *GenUIDReq) (*GenUIDRep, error)
	mustEmbedUnimplementedGlobalDataServer()
}

// UnimplementedGlobalDataServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalDataServer struct {
}

func (UnimplementedGlobalDataServer) EchoTest(context.Context, *EchoReq) (*EchoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoTest not implemented")
}
func (UnimplementedGlobalDataServer) GenUid(context.Context, *GenUIDReq) (*GenUIDRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenUid not implemented")
}
func (UnimplementedGlobalDataServer) mustEmbedUnimplementedGlobalDataServer() {}

// UnsafeGlobalDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalDataServer will
// result in compilation errors.
type UnsafeGlobalDataServer interface {
	mustEmbedUnimplementedGlobalDataServer()
}

func RegisterGlobalDataServer(s grpc.ServiceRegistrar, srv GlobalDataServer) {
	s.RegisterService(&GlobalData_ServiceDesc, srv)
}

func _GlobalData_EchoTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDataServer).EchoTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.GlobalData/EchoTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDataServer).EchoTest(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalData_GenUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDataServer).GenUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.GlobalData/GenUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDataServer).GenUid(ctx, req.(*GenUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalData_ServiceDesc is the grpc.ServiceDesc for GlobalData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbrpc.GlobalData",
	HandlerType: (*GlobalDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoTest",
			Handler:    _GlobalData_EchoTest_Handler,
		},
		{
			MethodName: "GenUid",
			Handler:    _GlobalData_GenUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_rpc/s_rpc_global.proto",
}
